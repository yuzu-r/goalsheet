<div class="container col-sm-10 col-sm-offset-1">
  <h4>Here's what's up for today:</h4>
  <% if @plans.empty? %>
    No goals are being tracked for today. Add some and get going!
  <% else %>
    <table class="table">
      <tr>
        <th>Plan Id </th>
        <th class="table-align-left">Goal</th>
        <th>Target Session Length</th>
        <th>Toggle Timer</th>
        <th>Elapsed Time</th>
        <th>Mark Goal Complete</th>
        <th>Remove Goal for Today</th>
      </tr>
      <% @plans.each do |plan| %>
        <tr>
          <td><%= plan.id %></td>
          <td class="table-align-left"><%= plan.goal.title %></td>
          <td><%= plan.goal.session_length %></td>
          <td>
            <span class="toggle-timer" data-id=<%=plan.id %>><i class="fa fa-hourglass-half"></i> start timer</span>
          </td>
          <td>
            <span class="time-hours" data-id=<%=plan.id %>></span> :
            <span class="time-minutes" data-id=<%=plan.id %>></span> :
            <span class="time-seconds" data-id=<%=plan.id %>></span>
          </td>
          <% if plan.is_complete %>
            <td> 
              <input type="checkbox" class= "toggle-complete" data-id= <%= plan.id %> checked > 
            </td>
          <% else %>
            <td>
              <input type="checkbox" class= "toggle-complete" data-id= <%= plan.id %> >
            </td>
          <% end %>
          <td></td>
        </tr>
      <% end %>
    </table>
   <h4>
    Total elapsed time as of <%=Time.zone.now %>: 
    <%= Time.at(@plans.sum("elapsed_time_seconds")).utc.strftime("%H:%M:%S") %>.
  </h4>
  <% end %>
</div> 
<div class="clearfix"></div>
<br/>
<div class="container col-sm-10 col-sm-offset-1">
  <h4> Available goals: </h4>
  Don't see anything here? <%= link_to 'Add some more goals.', new_user_goal_path(current_user) %>
  <table class="table">
    <tr>
      <th class="table-align-left">Goal</th>
      <th class="table-align-left">Description</th>
      <th>Action</th>
    </tr>
    <% current_user.unplanned_goals.each do |g| %> 
      <tr>
        <td class="table-align-left">
          <%= g.title %>
        </td>
        <td class="table-align-left">
          <%= g.description %>
        </td>
        <td>
          <%= link_to 'start tracking', dashboard_plans_path(@plan, goal_id: g.id), method: :post %>
        </td>
      </tr>
    <% end %>
  </table>
</div>

<div class="clearfix"></div>
<button id="bigB">ClickMeeee</button>

<script>
  $(document).ready(function(){
    console.log('initializing timers');
    timers_list = [];
    $('.toggle-timer').each(function(i, obj) {
      var planId = $(this).data('id');
      t = new Timer(planId);
      t.showElapsedTime();
      timers_list.push(t);
    });
  });

  $('#bigB').on('click', function() {
    console.log('bigB was clicked!');
  })

  $('.toggle-complete').on('click', function() {
    var planId = $(event.target).data('id');
    toggleComplete(planId);
  })

  $('.toggle-timer').on('click', function() {   
    var planId = $(event.target).data('id');
    toggleTimer(planId);
  })

  function Timer(planId) {
    this.planId = planId;
    this.intervalId;
    this.isRunning = false;
    this.showElapsedTime = function () {
      self = this;
      var elapsedTimeUrl = "/dashboard/plans/"+self.planId + "/get_elapsed_time";
      var data = {_method: 'PATCH'};
      var elHour = $(".time-hours[data-id='" + self.planId + "']");
      var elMinute = $(".time-minutes[data-id='" + self.planId + "']");
      var elSecond = $(".time-seconds[data-id='" + self.planId + "']");
      $.post(elapsedTimeUrl, data)
        .done(function(data){
          elapsed = data.elapsed_time_seconds;
          var elapsed_hrs = Math.floor(elapsed / 3600);
          var elapsed_mins = elapsed / 60 - elapsed_hrs * 60;
          var elapsed_secs = elapsed % 60;
          elHour.text(parseInt(elapsed_hrs));
          var elMinuteZeroPad = elapsed_mins < 10 ? "0" : "";
          var elSecondZeroPad = elapsed_secs < 10 ? "0" : "";
          elMinute.text(elMinuteZeroPad + parseInt(elapsed_mins));
          elSecond.text(elSecondZeroPad + parseInt(elapsed_secs));
        })
        .fail(function(xhr, textStatus, errorThrown){
          console.log('failed to toggle timer!');
          console.log(xhr.statusText);
          console.log(textStatus);
          console.log(errorThrown);        
        });

    }
    this.stop = function() {
      clearInterval(this.intervalId);
      this.intervalId = undefined;
      this.isRunning = false;
    }
    this.start = function() {
      var self = this;
      var elHour = $(".time-hours[data-id='" + self.planId + "']");
      var elMinute = $(".time-minutes[data-id='" + planId + "']");
      var elSecond = $(".time-seconds[data-id='" + planId + "']");
      var hours = parseInt(elHour.text()) || "0";
      var minutes = parseInt(elMinute.text()) || "0";
      var seconds = parseInt(elSecond.text()) || "0";
      var totalSeconds = hours * 60 * 60 + minutes * 60 + seconds;
      function runningTime(){
        totalSeconds++;
        var elapsed_hrs = Math.floor(totalSeconds / 3600);
        var elapsed_mins = Math.floor(totalSeconds / 60)  - elapsed_hrs * 60;
        var elapsed_secs = totalSeconds % 60;
        elHour.text(parseInt(elapsed_hrs));
        var elMinuteZeroPad = elapsed_mins < 10 ? "0" : "";
        var elSecondZeroPad = elapsed_secs < 10 ? "0" : "";
        elMinute.text(elMinuteZeroPad + parseInt(elapsed_mins));
        elSecond.text(elSecondZeroPad + parseInt(elapsed_secs));
      }
      runningTime();
      self.intervalId = setInterval(runningTime, 1000);
      self.isRunning = true;
    }
  }

  function toggleTimer(planId) {
    var toggleTimerUrl = "/dashboard/plans/"+planId + "/toggle_timer";
    console.log(toggleTimerUrl);
    var data = {_method: 'PATCH'};
    $.post(toggleTimerUrl, data)
      .done(function(data){
        var el = $(".toggle-timer[data-id='" + planId + "']");
        $(el).find('i').toggleClass('fa-hourglass-o fa-hourglass-half');
        // find the text node associated with this element so it can be directly replaced
        // leaving the icon alone
        var elTextNode = $(el).contents().filter(function() {return this.nodeType == 3;}).last();
        var newText = elTextNode[0].textContent === " start timer" ? " stop timer" : " start timer";
        elTextNode.replaceWith(document.createTextNode(newText));   
        showTime(planId);
      })
      .fail(function(xhr, textStatus, errorThrown){
        console.log('failed to toggle timer!');
        console.log(xhr.statusText);
        console.log(textStatus);
        console.log(errorThrown);        
      })
  }

  function showTime(planId) {
    for (var i = 0; i < timers_list.length; i++) {
      if (timers_list[i].planId == planId) {
        if (timers_list[i].isRunning == true) {
          timers_list[i].stop();
        }
        else {
          timers_list[i].start();  
        }
      }
    }
  }

  function toggleComplete(planId) {
    var toggleUrl = "/dashboard/plans/"+planId +"/mark_complete";
    console.log(toggleUrl);
    var data = {_method: 'PATCH'};
    $.post(toggleUrl, data)
      .done(function(data){
        console.log('success!');
      })
      .fail(function(xhr, textStatus, errorThrown) {
        console.log('failed to update plan!');
        console.log(xhr.statusText);
        console.log(textStatus);
        console.log(errorThrown);
      });
  }

</script>
